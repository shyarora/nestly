// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id          String   @id @default(uuid())
  email       String   @unique
  firstName   String
  lastName    String
  avatar      String?
  isHost      Boolean  @default(false)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hostedProperties Property[] @relation("HostProperties")
  bookings         Booking[]
  reviews          Review[]   @relation("ReviewsByUser")
  receivedReviews  Review[]   @relation("ReviewsForHost")
  
  @@map("users")
}

// Property model
model Property {
  id              String   @id @default(uuid())
  title           String
  description     String
  hostId          String
  propertyType    String   // Using String instead of enum for SQLite
  roomType        String   // Using String instead of enum for SQLite
  maxGuests       Int
  bedrooms        Int
  bathrooms       Float
  pricePerNight   Float
  cleaningFee     Float?
  serviceFee      Float?
  city            String
  state           String
  country         String
  address         String?
  latitude        Float?
  longitude       Float?
  isInstantBook   Boolean  @default(false)
  minimumStay     Int      @default(1)
  maximumStay     Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  host         User        @relation("HostProperties", fields: [hostId], references: [id])
  bookings     Booking[]
  reviews      Review[]
  images       PropertyImage[]
  amenities    PropertyAmenity[]
  
  @@map("properties")
}

// Property Images
model PropertyImage {
  id         String  @id @default(uuid())
  propertyId String
  url        String
  caption    String?
  order      Int     @default(0)

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("property_images")
}

// Amenities
model Amenity {
  id          String @id @default(uuid())
  name        String @unique
  icon        String?
  category    String // Using String instead of enum for SQLite

  properties PropertyAmenity[]
  
  @@map("amenities")
}

// Property Amenities (Many-to-Many)
model PropertyAmenity {
  id         String @id @default(uuid())
  propertyId String
  amenityId  String

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  amenity  Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)
  
  @@unique([propertyId, amenityId])
  @@map("property_amenities")
}

// Booking model
model Booking {
  id            String   @id @default(uuid())
  propertyId    String
  guestId       String
  checkIn       DateTime
  checkOut      DateTime
  guests        Int
  totalPrice    Float
  status        String   @default("PENDING") // Using String instead of enum
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id])
  guest    User     @relation(fields: [guestId], references: [id])
  review   Review?
  
  @@map("bookings")
}

// Review model
model Review {
  id            String   @id @default(uuid())
  bookingId     String   @unique
  propertyId    String
  reviewerId    String
  hostId        String
  rating        Int
  comment       String?
  accuracy      Int?
  communication Int?
  cleanliness   Int?
  location      Int?
  checkIn       Int?
  value         Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  booking   Booking  @relation(fields: [bookingId], references: [id])
  property  Property @relation(fields: [propertyId], references: [id])
  reviewer  User     @relation("ReviewsByUser", fields: [reviewerId], references: [id])
  host      User     @relation("ReviewsForHost", fields: [hostId], references: [id])
  
  @@map("reviews")
}
