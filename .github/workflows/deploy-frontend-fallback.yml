name: Deploy Frontend (Fallback Strategy)

on:
  workflow_dispatch: # Manual trigger only

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages-fallback"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build with multiple strategies
        run: |
          echo "Attempting multiple build strategies..."

          # Strategy 1: Normal build
          echo "=== Strategy 1: npm run build ==="
          npm run build || echo "Strategy 1 failed"

          # Check what directories exist
          echo "=== Checking output directories ==="
          ls -la

          # Find the output directory
          OUTPUT_DIR=""
          if [ -d "dist" ]; then
            OUTPUT_DIR="dist"
            echo "✅ Found dist directory"
          elif [ -d "out" ]; then
            OUTPUT_DIR="out"
            echo "✅ Found out directory"
          elif [ -d ".next" ]; then
            OUTPUT_DIR=".next"
            echo "✅ Found .next directory"
          else
            echo "❌ No output directory found, creating fallback"
            mkdir -p dist
            echo "<h1>Build Error</h1><p>No output directory was generated.</p>" > dist/index.html
            OUTPUT_DIR="dist"
          fi

          echo "OUTPUT_DIR=$OUTPUT_DIR" >> $GITHUB_ENV

          # Ensure the output directory has content
          if [ -d "$OUTPUT_DIR" ] && [ "$(ls -A $OUTPUT_DIR)" ]; then
            echo "✅ Output directory has content"
            ls -la "$OUTPUT_DIR"
          else
            echo "❌ Output directory is empty, creating fallback content"
            mkdir -p "$OUTPUT_DIR"
            echo "<h1>Nestly</h1><p>Property rental platform</p>" > "$OUTPUT_DIR/index.html"
          fi
        env:
          NODE_ENV: production

      - name: Add .nojekyll file
        run: |
          touch ${{ env.OUTPUT_DIR }}/.nojekyll
          echo "Added .nojekyll file"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./${{ env.OUTPUT_DIR }}
          name: github-pages
          retention-days: 1

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
